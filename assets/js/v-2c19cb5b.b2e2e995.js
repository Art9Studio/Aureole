"use strict";(self.webpackChunkaureole=self.webpackChunkaureole||[]).push([[230],{187:(s,n,e)=>{e.r(n),e.d(n,{data:()=>o});const o={key:"v-2c19cb5b",path:"/config/authz.html",title:"Авторизатор",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Конфигурация jwt авторизатора.",slug:"конфигурация-jwt-авторизатора",children:[{level:3,title:"Пример конфига",slug:"пример-конфига",children:[]}]}],filePathRelative:"config/authz.md",git:{contributors:[{name:"Semen Asaevich",email:"semen.asaevich@gmail.com",commits:8},{name:"asaevich",email:"semen.asaevich@gmail.com",commits:1}]}}},6206:(s,n,e)=>{e.r(n),e.d(n,{default:()=>r});const o=(0,e(6252).uE)('<h1 id="авторизатор" tabindex="-1"><a class="header-anchor" href="#авторизатор" aria-hidden="true">#</a> Авторизатор</h1><hr><p>Описывает все свойства данного авторизатора. Данный плагин используется для авторизации пользователя и выдачи ему некого токена доступа, будь то jwt или сессионного токена. Плагин является встраиваемым, что позволяет комбинировать различные способы аутентификации и авторизации.</p><ul><li>Тип: <strong>object</strong>. Наличие дополнительных свойств: <strong>Недопустимо</strong>. <h4 id="допустим-один-из-вариантов-конфига" tabindex="-1"><a class="header-anchor" href="#допустим-один-из-вариантов-конфига" aria-hidden="true">#</a> Допустим один из вариантов конфига</h4><h2 id="конфигурация-jwt-авторизатора" tabindex="-1"><a class="header-anchor" href="#конфигурация-jwt-авторизатора" aria-hidden="true">#</a> Конфигурация jwt авторизатора.</h2><ul><li>Тип: <strong>object</strong>. Конфигурация jwt авторизатора. Служит для задания свойств авторизатора. Обязательны: <code>type</code>, <code>config</code>. Наличие дополнительных свойств: <strong>Недопустимо</strong>. <ul><li><code>type</code>: Константа: <strong>jwt</strong>. Тип авторизатора. Необходим, чтобы дать Aureole понять, какой из авторизаторов использовать.</li><li><code>config</code>: Тип: <strong>object</strong>. Конфигурация авторизатора. Описывает все свойства данного авторизатора. Обязательны: <code>sign_key</code>. Наличие дополнительных свойств: <strong>Недопустимо</strong>. <ul><li><code>iss</code>: Тип: <strong>string</strong>. Значение по-умолчанию: <strong>Aureole Server</strong>. Идентификатор стороны, генерирующей токен. Чувствительная к регистру строка или URI, которая является уникальным идентификатором стороны, генерирующей токен. Минимальная длина: <strong>1</strong>.</li><li><code>sub</code>: Тип: <strong>boolean</strong>. Значение по-умолчанию: <strong>False</strong>. Флаг наличия идентификатора субъекта. Определяет, необходимо ли Aureole добавить в токен уникальных идентификатор стороны, о которой содержится информация в данной токене.</li><li><code>aud</code>: Тип: <strong>array</strong>. Значение по-умолчанию: <strong>[]</strong>. Массив получателей токена. Массив чувствительных к регистру строк или URI, являющийся списком получателей данного токена. Элементы должны быть уникальными. <ul><li><strong>Элементы</strong>: Тип: <strong>string</strong>.</li></ul></li><li><code>nbf</code>: Тип: <strong>integer</strong>. Значение по-умолчанию: <strong>0</strong>. Количество времени, после котрого токена станет валидным. Количество времени, после котрого токена станет валидным после его создания. Минимальное значение: <strong>0</strong>.</li><li><code>iat</code>: Тип: <strong>boolean</strong>. Значение по-умолчанию: <strong>False</strong>. Флаг наличия времени создания токена. Определяет, необходимо ли Aureole добавить в токен время его создания.</li><li><code>access_bearer</code>: Допускаются следующие значения: <code>cookie</code>, <code>header</code>, <code>both</code>. Значение по-умолчанию: <strong>header</strong>. Имя носителя токена access-токена. Определяет, каким образом будет доставляться access-токен.</li><li><code>refresh_bearer</code>: Допускаются следующие значения: <code>cookie</code>, <code>body</code>, <code>both</code>. Значение по-умолчанию: <strong>cookie</strong>. Имя носителя токена refresh-токена. Определяет, каким образом будет доставляться refresh-токен.</li><li><code>sign_key</code>: Тип: <strong>string</strong>. Дополнительно: Ссылка на экземпляр плагина крипто-ключа. Ссылка на приватный крипто-ключ. Имя крипто-ключа, который должен использоваться для подписи токенов. Минимальная длина: <strong>1</strong>.</li><li><code>verify_keys</code>: Тип: <strong>array</strong>. Массив ссылок на публичные крипто-ключи. Имена крипто-ключей, которые могут быть использованы для проверки подписи токена. Минимальное кол-во элементов: <strong>1</strong>. Элементы должны быть уникальными. <ul><li><strong>Элементы</strong>: Тип: <strong>string</strong>. Дополнительно: Ссылка на экземпляр плагина крипто-ключа. Минимальная длина: <strong>1</strong>.</li></ul></li><li><code>access_exp</code>: Тип: <strong>integer</strong>. Дополнительно: Единицы измерения: s. Значение по-умолчанию: <strong>900</strong>. Время жизни access-токена. Время, на протяжении которого access-токен будет валидным. Отсчет начинается с момента формирования токена. Минимальное значение: <strong>0</strong>.</li><li><code>refresh_exp</code>: Тип: <strong>integer</strong>. Дополнительно: Единицы измерения: s. Значение по-умолчанию: <strong>7890000</strong>. Время жизни refresh-токена. Время, на протяжении которого refresh-токен будет валидным. Отсчет начинается с момента формирования токена. Минимальное значение: <strong>0</strong>.</li><li><code>refresh_url</code>: Тип: <strong>string</strong>. Дополнительно: Относительный URL-адрес. Значение по-умолчанию: <strong>/refresh</strong>. Маршрут обновления токена. Определяет маршрут, по которому будет производится обновления истекших токенов. Минимальная длина: <strong>1</strong>.</li><li><code>payload</code>: Тип: <strong>string</strong>. Дополнительно: Путь к файлу, Расширение файла: json. Путь к файлу полезной нагрузки. Определяет, какой файл использовать в качестве шаблона для формирования полезной нагрузки токена. Минимальная длина: <strong>1</strong>.</li><li><code>native_queries</code>: Тип: <strong>string</strong>. Дополнительно: Путь к файлу, Расширение файла: yaml,yml. Путь к файлу запросов. Определяет, какой файл использовать в качестве перечисления дополнительных запросов к БД.</li></ul></li></ul><h3 id="пример-конфига" tabindex="-1"><a class="header-anchor" href="#пример-конфига" aria-hidden="true">#</a> Пример конфига</h3><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">authZ</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">&quot;jwt&quot;</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">jti</span><span class="token punctuation">:</span> <span class="token string">&quot;0&quot;</span>\n      <span class="token key atrule">sign_key</span><span class="token punctuation">:</span> jwk_file\n      <span class="token key atrule">verify_keys</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> jwk_file <span class="token punctuation">]</span>\n      <span class="token key atrule">payload</span><span class="token punctuation">:</span> lab/templates/jwt_payload.json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul></li></ul>',4),t={},r=(0,e(3744).Z)(t,[["render",function(s,n){return o}]])},3744:(s,n)=>{n.Z=(s,n)=>{for(const[e,o]of n)s[e]=o;return s}}}]);