api_version: "0.1"
ping_path: "/ping"

apps:
  - name: auth
    host: "${RENDER_EXTERNAL_URL:http://localhost:3000}"
    path_prefix: "/auth"

    identity:
      id:
      username:
        enabled: true
      phone:
        enabled: true
      email:
        enabled: true
        required: false

    authN:
      - type: "password_based"
        authZ: jwt
        config:
          main_hasher: django
          storage: db
          login:
            path: "/login"
          register:
            path: "/register"
          password_reset:
            path: "/password/reset"
            confirm_url: "/password/reset/confirm"
            sender: email
            template: reset
            token:
              exp: 3600
              hash_func: "sha256"
            fields_map:
              email: "{$.email}"
          verification:
            path: "/email-verify"
            confirm_url: "/email-verify/confirm"
            sender: email
            template: email_verification
            token:
              exp: 3600
              hash_func: "sha256"
            fields_map:
              email: "{$.email}"

      - type: "email"
        path_prefix: "/email"
        authZ: jwt
        config:
          storage: db
          login:
            path: "/login"
            fields_map:
              email: "{$.email}"
          register:
            path: "/register"
            fields_map:
              username: "{$.username}"
              email: "{$.email}"
          magic_link:
            path: "/email-confirm"
            sender: email
            template: magic_link
            token:
              exp: 3600
              hash_func: "sha256"

      - type: "phone"
        path_prefix: "/phone"
        authZ: jwt
        config:
          hasher: django
          storage: db
          login:
            path: "/login"
            fields_map:
              phone: "{$.phone}"
          register:
            path: "/register"
            fields_map:
              username: "{$.username}"
              phone: "{$.phone}"
          verification:
            path: "/login/verify"
            resend_url: "login/resend"
            max_attempts: 3
            sender: twilio
            template: phone_otp
            otp:
              length: 6
              alphabet: "1234567890"
              prefix: "A-"
              exp: 300
            fields_map:
              id: "{$.otp_id}"
              otp: "{$.otp}"

      - type: "google"
        path_prefix: "/oauth2/google"
        authZ: jwt
        config:
          storage: db
          client_id: "${GOOGLE_CLIENT_ID}"
          client_secret: "${GOOGLE_SECRET}"
          scopes:
            - "https://www.googleapis.com/auth/userinfo.email"
            - "https://www.googleapis.com/auth/userinfo.profile"
          redirect_uri: "/login"

      - type: "vk"
        path_prefix: "/oauth2/vk"
        authZ: jwt
        config:
          storage: db
          client_id: "${VK_CLIENT_ID}"
          client_secret: "${VK_SECRET}"
          scopes:
            - "email"
          redirect_uri: "/login"
          fields: [ ]

      - type: "facebook"
        path_prefix: "/oauth2/facebook"
        authZ: jwt
        config:
          storage: db
          client_id: "${FACEBOOK_CLIENT_ID}"
          client_secret: "${FACEBOOK_SECRET}"
          scopes:
            - "email"
          redirect_uri: "/login"
          fields:
            - "email"

      - type: "apple"
        path_prefix: "/oauth2/apple"
        authZ: jwt
        config:
          storage: db
          secret_key: apple_private_key
          public_key: apple_public_keys
          client_id: "${APPLE_CLIENT_ID}"
          team_id: "${APPLE_TEAM_ID}"
          key_id: "${APPLE_KEY_ID}"
          scopes:
            - "email"
            - "name"
          redirect_uri: "/login"

    authZ:
      - type: "jwt"
        name: jwt
        path_prefix: "/"
        config:
          iss: "Aureole Server"
          sub: true
          nbf: 0
          iat: true
          jti: "0"
          access_bearer: "${JWT_ACCESS_BEARER:cookie}"
          refresh_bearer: "${JWT_REFRESH_BEARER:body}"
          sign_key: keys
          verify_keys: [ keys ]
          access_exp: 900
          refresh_exp: 7890000
          refresh_url: "/refresh"
          payload: "/app/render/res/jwt_payload.json.tmpl"

storages:
  - type: "postgresql"
    name: db
    config:
      url: "${DATABASE_URL}"

hashers:
  - type: "pbkdf2"
    name: django
    config:
      func: "sha256"
      iterations: 260000
      salt_length: 22
      key_length: 32

crypto_keys:
  - type: "jwk"
    name: keys
    path_prefix: "/keys"
    config:
      kty: "RSA"
      alg: "RS256"
      size: 2048
      kid: "SHA-256"
      path: "render/res/keys.json"

  - type: "pem"
    name: apple_private_key
    path_prefix: "/apple-key"
    config:
      alg: "ES256"
      path: "render/res/apple_key.p8"

  - type: "jwk"
    name: apple_public_keys
    path_prefix: "/apple-public-keys"
    config:
      path: "https://appleid.apple.com/auth/keys"

senders:
  - type: "email"
    name: email
    config:
      host: "${SMTP_HOST}"
      username: "${SMTP_USERNAME}"
      password: "${SMTP_PASSWORD}"
      from: "${SMTP_FROM}"
      bcc: [ ]
      cc: [ ]
      templates:
        reset: "/app/render/res/password_reset.txt"
        magic_link: "/app/render/res/magic_link.txt"
        email_verification: "/app/render/res/email_verification.txt"

  - type: "twilio"
    name: twilio
    config:
      account_sid: "${TWILIO_ACCOUNT_SID}"
      auth_token: "${TWILIO_AUTH_TOKEN}"
      from: "${TWILIO_PHONE_NUMBER}"
      templates:
        phone_otp: "/app/render/res/phone_otp.txt"