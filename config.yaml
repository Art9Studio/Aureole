api_version: "0.1"

apps:
  one:
    path_prefix: "/one"

    authN:
      - type: "password_based"
        path_prefix: "/"
        authZ: session
        config:
          main_hasher: argon2
          compat_hashers: []  # todo: implement it
          collection: identity
          storage: one_db
          login:
            path: "/login"
            fields_map:
              identity: "{$.username}"
              password: "{$.password}"
          register:
            path: "/register"
            login_after: true
            fields_map:
              identity: "{$.username}"
              password: "{$.password}"
              email: "{$.email}"

    authZ:
      - name: session
        type: "session"
        config:
          collection: session
          storage: one_db
          domain: "localhost"
          path: "/"
          max_age: 3600
          secure: true
          http_only: false
          same_site: ""
          clean_interval: 60

  #two:
  #  path_prefix: "/two"
  #
  #  authN:
  #    - type: "password_based"
  #      authZ: jwt
  #      config:
  #        main_hasher: argon2
  #        collection: identity
  #        storage: one_db
  #
  #  authZ:
  #    - name: jwt
  #      type: "jwt"
  #      config:
  #        alg: "RS256"
  #        kid_alg: "docker_registry" # implement docker_registry and default and none
  #        keys: [ rsa ]
  #        payload: "jwt_payload.json"
      #          "$.userID": "id"
      #          "$.userPosts": "@getUserPosts" raw query


storages:
  - type: "postgresql"
    name: one_db
    config:
      url: "postgresql://root:password@localhost:5432/test?sslmode=disable&search_path=public"

  - type: "postgresql"
    name: two_db
    config:
      #adapter: "postgresql"
      username: "root"
      password: "password"
      host: "localhost"
      port: "5432"
      db_name: "test"
      options: # df
        sslmode: "disable"
        search_path: "public"

collections:
  - type: "identity"
    name: identity
    use_existent: true
    config:
      name: "users"
      pk: "id"
      fields_map:
        identity: "username"
        password: "password"

  - type: "session"
    name: session
    use_existent: false
    config:
      name: "sessions"
      pk: "user_id"
      fields_map:
       session_token: "session_id"
       expiration: "expiration"

hashers:
  - type: "argon2"
    name: argon2
    config:
      kind: "argon2i"
      iterations: 1
      parallelism: 1
      salt_length: 16
      key_length: 16
      memory: 16384

  - type: "pbkdf2"
    name: django
    config:
      func: "sha1"
      iterations: 1
      salt_length: 16
      key_length: 16

crypto_keys:
  - type: "jwk"
    name: jwk_file
    config:
      path: "./keys/private.json"

  - type: "jwk"
    name: jwk_url
    config:
      path: "https://www.googleapis.com/oauth2/v3/certs"
  #- type: "file"
  #  name: file
  #  config:
  #    alg: "rsa"
  #    kid: "kkk"
  #    path: "./keys/private.pem"


senders:
  - type: "email"
    name: email
    config:
      host: "smtp.gmail.com:587"
      username: "test.aureole@gmail.com"
      password: "${SMTP_PASSWORD}"
      from: "test.aureole@gmail.com"
      bcc: []
      cc: []
      templates:
        default_text: "./templates/default.txt"
        default_html: "./templates/default.html" # if extension is 'html' we send it as html