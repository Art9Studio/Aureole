api_version: "0.1"

apps:
  one:
    path_prefix: "/one"

    authN:
      - type: "password_based"
        path_prefix: "/"
        authZ: sessions
        config:
          main_hasher: argon2
          compat_hashers: []  # todo: implement it # df
          collection: identity
          storage: one_db
          login: # df
            path: "/login"
            fields_map:
              identity: "{$.username}"
              password: "{$.password}"
          register: # df
            path: "/register"
            login_after: true
            fields_map:
              identity: "{$.username}"
              password: "{$.password}"
              email: "{$.email}"

    authZ:
      - name: sessions
        type: "sessions"
        config:
          collection: session
          storage: one_db
          domain: "localhost"
          path: "/"
          max_age: 3600
          secure: true
          http_only: false

  two:
    path_prefix: "/two"

    authN:
      - type: "password_based"
        authZ: jwt
        config:
          main_hasher: argon2
          collection: identity
          storage: one_db

    authZ:
      - name: jwt
        type: "jwt"
        config:
          alg: "RS256"
          kid_alg: "docker_registry" # implement docker_registry and default and none
          keys: [ rsa ]
          payload: "jwt_payload.json"
      #          "$.userID": "id"
      #          "$.userPosts": "@getUserPosts" raw query


storages:
  - name: one_db
    config:
      url: "postgresql://root:password@localhost:5432/test?sslmode=disable&search_path=public"

  - name: two_db
    config:
      adapter: "postgresql"
      username: "root"
      password: "password"
      host: "localhost"
      port: "5432"
      db_name: "test"
      options: # df
        sslmode: "disable"
        search_path: "public"

collections:
  - type: "identity"
    name: identity
    use_existent: true
    config:
      name: "users"
      pk: "id"
      fields_map:
        identity: "username"
        password: "password"

#  - type: "session"
#    name: session
#    use_existent: false
#    configs:
#      name: "sessions"
#      pk: "id"
#      # todo: fill rest

hashers:
  - type: "argon2"
    name: argon2
    config:
      kind: "argon2i"
      iterations: 1
      parallelism: 1
      salt_length: 16
      key_length: 16
      memory: 16384

  - type: "pbkdf2"
    name: django
    config:
      func: "sha1"
      iterations: 1
      salt_length: 16
      key_length: 16

crypto_keys:
  - type: "rsa"
    driver: "file"
    name: rsa
    config:
      path: "./private.pem"
