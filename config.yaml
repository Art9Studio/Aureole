api_version: "0.1"
ping_path: "/ping"

apps:
  one:
    host: "http://localhost:3000"
    path_prefix: "/one"

    identity:
      collection: identity
      id:
        enabled: true
        unique: true
        required: true
        credential: false
      username:
        enabled: true
        unique: false
        required: false
        credential: true
      phone:
        enabled: false
        unique: true
        required: false
        credential: true
      email:
        enabled: false
        unique: true
        required: true
        credential: true
      additional:
        - is_superuser:
            unique: false
            required: false
            internal: true
        - first_name:
            unique: false
            required: false
            internal: false
        - last_name:
            unique: false
            required: false
            internal: false
        - is_staff:
            unique: false
            required: false
            internal: true

    authN:
      - type: "password_based"
        path_prefix: "/"
        authZ: session
        config:
          main_hasher: argon2
          compat_hashers: [ ]  # todo: implement it
          collection: pwbased
          storage: one_db
          login:
            path: "/login"
            fields_map:
              username: "{$.username}"
              password: "{$.password}"
          register:
            path: "/register"
            login_after: true
            fields_map:
              username: "{$.username}"
              email: "{$.email}"
              phone: "{$.phone}" # it's redundant in this case. we disabled phone
              password: "{$.password}"

    authZ:
      - name: session
        type: "session"
        config:
          collection: session
          storage: one_db
          domain: "localhost"
          path: "/"
          max_age: 3600
          secure: true
          http_only: false
          same_site: ""
          clean_interval: 60

  two:
    host: "https://t.aureole.cloud"
    path_prefix: "/two"

    identity:
      collection: identity
      id:
      username:
      phone:
      email:
        enabled: true

    authN:
      - type: "password_based"
        authZ: jwt
        config:
          main_hasher: argon2
          collection: pwbased
          storage: one_db
          register:
            verify_after: true
          password_reset:
            path: "/password/reset"
            confirm_url: "/password/reset/confirm"
            collection: reset
            sender: email
            template: reset
            token:
              exp: 3600
              hash_func: "sha256"
            fields_map:
              username: "{$.username}"
              email: "{$.email}"
              phone: "{$.phone}"
              password: "{$.password}"
          verification:
            path: "/email-verify"
            confirm_url: "/email-verify/confirm"
            collection: email_verification
            sender: email
            template: email_verification
            token:
              exp: 3600
              hash_func: "sha256"
            fields_map:
              email: "{$.email}"

      - type: "google"
        path_prefix: "/oauth2/google"
        authz: jwt
        config:
          collection: oauth2
          storage: one_db
          client_id: "${GOOGLE_CLIENT_ID}"
          client_secret: "${GOOGLE_SECRET}"
          scopes:
            - "https://www.googleapis.com/auth/userinfo.email"
            - "https://www.googleapis.com/auth/userinfo.profile"
          redirect_uri: "/login"

      - type: "vk"
        path_prefix: "/oauth2/vk"
        authz: jwt
        config:
          collection: oauth2
          storage: one_db
          client_id: "${VK_CLIENT_ID}"
          client_secret: "${VK_SECRET}"
          scopes:
            - "email"
          redirect_uri: "/login"
          fields: [ ]

      - type: "facebook"
        path_prefix: "/oauth2/facebook"
        authz: jwt
        config:
          collection: oauth2
          storage: one_db
          client_id: "${FACEBOOK_CLIENT_ID}"
          client_secret: "${FACEBOOK_SECRET}"
          scopes:
            - "email"
          redirect_uri: "/login"
          fields:
            - "email"

      - type: "apple"
        path_prefix: "/oauth2/apple"
        authz: jwt
        config:
          collection: oauth2
          storage: one_db
          secret_key: apple_signin_key
          public_key: apple_keys
          client_id: "${APPLE_CLIENT_ID}"
          team_id: "${APPLE_TEAM_ID}"
          key_id: "${APPLE_KEY_ID}"
          scopes:
            - "email"
            - "name"
          redirect_uri: "/login"


    authZ:
      - type: "jwt"
        name: jwt
        path_prefix: "/"
        config:
          iss: "Aureole Server"
          sub: true
          aud: [ "app1", "app2" ]
          nbf: 0
          iat: true
          jti: "0" # todo: implement jti
          access_bearer: "cookie" # [cookie, header, both]
          refresh_bearer: "body" # [cookie, body, both]
          alg: "RS256"
          sign_key: jwk_file
          verify_keys: [ jwk_file ]
          access_exp: 900
          refresh_exp: 7890000
          refresh_url: "/refresh"
          payload: "lab/templates/jwt_payload.json"
          native_queries: "lab/native-queries/native.yaml"

  three:
    host: "localhost:3000"
    path_prefix: "/three"

    identity:
      collection: identity
      id:
      username:
      phone:
        enabled: true
      email:
        enabled: true

    authN:
      - type: "email"
        path_prefix: "/email"
        authz: jwt
        config:
          collection: identity
          storage: one_db
          login:
            path: "/login"
            fields_map:
              email: "{$.email}"
          register:
            path: "/register"
            fields_map:
              username: "{$.username}"
              email: "{$.email}"
          magic_link:
            path: "/email-confirm"
            collection: magic_link
            sender: email
            template: magic_link
            token:
              exp: 3600
              hash_func: "sha256"

      - type: "phone"
        path_prefix: "/"
        authZ: jwt
        config:
          hasher: django
          collection: identity
          storage: one_db
          login:
            path: "/login"
            fields_map:
              phone: "{$.phone}"
          register:
            path: "/register"
            fields_map:
              username: "{$.username}"
              phone: "{$.phone}"
          verification:
            path: "/login/verify"
            resend_url: "login/resend"
            collection: phone_otp
            max_attempts: 3
            sender: twilio
            template: phone_otp
            otp:
              length: 6
              alphabet: "1234567890"
              prefix: "A-"
              exp: 300
            fields_map:
              id: "{$.otp_id}"
              otp: "{$.otp}"

    authZ:
      - type: "jwt"
        name: jwt
        path_prefix: "/"
        config:
          iss: "Aureole Server"
          sub: true
          aud: [ "app1", "app2" ]
          nbf: 0
          iat: true
          jti: "0" # todo: implement jti
          access_bearer: "cookie" # [cookie, header, both]
          refresh_bearer: "cookie" # [cookie, body, both]
          alg: "RS256"
          sign_key: jwk_file
          verify_keys: [ jwk_file ]
          access_exp: 900
          refresh_exp: 7890000
          refresh_url: "/refresh"
          payload: "lab/templates/jwt_payload.json"

storages:
  - type: "postgresql"
    name: one_db
    config:
      url: "postgresql://root:password@localhost:5432/aureole?sslmode=disable&search_path=public"

  - type: "postgresql"
    name: two_db
    config:
      username: "root"
      password: "password"
      host: "localhost"
      port: "5432"
      db_name: "aureole"
      options:
        sslmode: "disable"
        search_path: "public"

collections:
  - type: "identity" # main coll
    name: identity
    config:
      name: "users"
      pk: "id"
      fields_map:
        id: "id" # todo: think about type of it
        username: "username"
        phone: "phone"
        email: "email"
        is_active: no # to disable use "no"
        created: no # by default "created"
        email_verified: "email_verified"
        phone_verified: "phone_verified"
        is_superuser:
          field: "is_superuser"
          type: boolean
          default: false
        is_staff:
          name: "is_staff"
          type: boolean
          default: false

  - type: "pwbased" # appendix coll
    name: pwbased
    parent: identity
    config:
      fields_map:
        password: "password"

  - type: "session" # main coll
    name: session
    config:
      name: "sessions"
      pk: "user_id"
      fields_map:
        id: "user_id"
        session_token: "session_id"
        expiration: "expiration"

  - type: "phone_otp"
    name: phone_otp
    config:
      name: "phone_verifications"
      pk: "id"
      fields_map:
        id: "id"
        phone: "phone"
        otp: "otp"
        attempts: "attempts"
        expires: "expires"
        invalid: "invalid"

  - type: "password_reset"
    name: reset
    config:
      name: "password_resets"
      pk: "id"
      fields_map:
        id: "id"
        email: "email"
        token: "token"
        expires: "expires"
        invalid: "invalid"

  - type: "email_link"
    name: magic_link
    config:
      name: "email_links"
      pk: "id"
      fields_map:
        id: "id"
        email: "email"
        token: "token"
        expires: "expires"
        invalid: "invalid"

  - type: "email_verification"
    name: email_verification
    config:
      name: "email_verifications"
      pk: "id"
      fields_map:
        id: "id"
        email: "email"
        token: "token"
        expires: "expires"
        invalid: "invalid"

  - type: "oauth2"
    name: oauth2
    config:
      name: "social_logins"
      pk: id
      fields_map:
        id: "id"
        social_id: "social_id"
        email: "email"
        provider: "provider"
        user_data: "user_data"
        user_id: "user_id"

hashers:
  - type: "argon2"
    name: argon2
    config:
      kind: "argon2i"
      iterations: 1
      parallelism: 1
      salt_length: 16
      key_length: 16
      memory: 16384

  - type: "pbkdf2"
    name: django
    config:
      func: "sha256"
      iterations: 260000
      salt_length: 22
      key_length: 32

crypto_keys:
  - type: "jwk"
    name: jwk_file
    path_prefix: "/keys"
    config:
      path: "lab/keys/keys.json"

  - type: "jwk"
    name: jwk_url
    path_prefix: "/google-keys"
    config:
      path: "https://www.googleapis.com/oauth2/v3/certs"

  - type: "pem"
    name: apple_signin_key
    path_prefix: "/pem-keys"
    config:
      alg: "ES256"
      path: "lab/keys/apple_key.p8"

  - type: "jwk"
    name: apple_keys
    path_prefix: "/apple-keys"
    config:
      path: "https://appleid.apple.com/auth/keys"

senders:
  - type: "email"
    name: email
    config:
      host: "smtp.gmail.com:587"
      username: "test.aureole@gmail.com"
      password: "${SMTP_PASSWORD}"
      from: "test.aureole@gmail.com"
      bcc: [ ]
      cc: [ ]
      templates:
        default_text: "lab/templates/default.txt"
        default_html: "lab/templates/default.html" # if extension is 'html' we send it as html
        reset: "lab/templates/password_reset.txt"
        magic_link: "lab/templates/magic_link.txt"
        email_verification: "lab/templates/email_verification.txt"

  - type: "twilio"
    name: twilio
    config:
      account_sid: "${TEST_TWILIO_ACCOUNT_SID}"
      auth_token: "${TEST_TWILIO_AUTH_TOKEN}"
      from: "${TEST_TWILIO_PHONE_NUMBER}"
      templates:
        phone_otp: "lab/templates/phone_otp.txt"