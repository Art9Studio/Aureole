api_version: "0.1"

apps:
  one:
    path_prefix: "/one"

    identity:
      collection: identity
      id:
        enabled: true
        unique: true
        required: true
        credential: false
      username:
        enabled: true
        unique: false
        required: false
        credential: true
      phone:
        enabled: false
        unique: true
        required: false
        credential: true
      email:
        enabled: false
        unique: true
        required: true
        credential: true
      additional:
        - is_superuser:
            unique: false
            required: false
            internal: true
        - first_name:
            unique: false
            required: false
            internal: false
        - last_name:
            unique: false
            required: false
            internal: false
        - is_staff:
            unique: false
            required: false
            internal: true

    authN:
      - type: "password_based"
        path_prefix: "/"
        authZ: session
        config:
          main_hasher: argon2
          compat_hashers: [ ]  # todo: implement it
          collection: pwbased
          storage: one_db
          login:
            path: "/login"
            fields_map:
              username: "{$.username}"
              password: "{$.password}"
          register:
            path: "/register"
            login_after: true
            fields_map:
              username: "{$.username}"
              email: "{$.email}"
              phone: "{$.phone}" # it's redundant in this case. we disabled phone
              password: "{$.password}"

    authZ:
      - name: session
        type: "session"
        config:
          collection: session
          storage: one_db
          domain: "localhost"
          path: "/"
          max_age: 3600
          secure: true
          http_only: false
          same_site: ""
          clean_interval: 60

  two:
    path_prefix: "/two"

    identity:
      collection: identity
      id:
      username:
        required: true
        unique: true
      phone:
      email:

    authN:
      - type: "password_based"
        authZ: jwt
        config:
          main_hasher: argon2
          collection: pwbased
          storage: one_db

    authZ:
      - type: "jwt"
        name: jwt
        path_prefix: "/"
        config:
          iss: "Aureole Server"
          sub: true
          aud: [ "app1", "app2" ]
          nbf: 0
          iat: true
          jti: 0 # todo: implement jti
          access_bearer: "cookie" # [cookie, header, both]
          refresh_bearer: "cookie" # [cookie, body, both]
          alg: "RS256"
          sign_key: jwk_file
          verify_keys: [ jwk_file ]
          access_exp: 900
          refresh_exp: 7890000
          refresh_url: "/refresh"
          payload: "lab/templates/jwt_payload.json"
          native_queries: "lab/native-queries/native.yaml"

storages:
  - type: "postgresql"
    name: one_db
    config:
      url: "postgresql://root:password@localhost:5432/aureole?sslmode=disable&search_path=public"

  - type: "postgresql"
    name: two_db
    config:
      username: "root"
      password: "password"
      host: "localhost"
      port: "5432"
      db_name: "aureole"
      options:
        sslmode: "disable"
        search_path: "public"

collections:
  - type: "identity" # main coll
    name: identity
    config:
      name: "users"
      pk: "id"
      fields_map:
        id: "id" # todo: think about type of it
        username: "username"
        phone: "phone"
        email: "email"
        is_active: "no" # to disable use "no"
        created: "no" # by default "created"
        is_superuser:
          field: "is_superuser"
          type: boolean
          default: false
        is_staff:
          name: "is_staff"
          type: boolean
          default: false

  - type: "pwbased" # appendix coll
    name: pwbased
    parent: identity
    config:
      fields_map:
        password: "password"

  - type: "session" # main coll
    name: session
    config:
      name: "sessions"
      pk: "user_id"
      fields_map:
        id: "user_id"
        session_token: "session_id"
        expiration: "expiration"

hashers:
  - type: "argon2"
    name: argon2
    config:
      kind: "argon2i"
      iterations: 1
      parallelism: 1
      salt_length: 16
      key_length: 16
      memory: 16384

  - type: "pbkdf2"
    name: django
    config:
      func: "sha1"
      iterations: 1
      salt_length: 16
      key_length: 16

crypto_keys:
  - type: "jwk"
    name: jwk_file
    config:
      path: "lab/keys/keys.json"

  - type: "jwk"
    name: jwk_url
    config:
      path: "https://www.googleapis.com/oauth2/v3/certs"
  #- type: "file"
  #  name: file
  #  config:
  #    alg: "rsa"
  #    kid: "kkk"
  #    path: "./keys/private.pem"

senders:
  - type: "email"
    name: email
    config:
      host: "smtp.gmail.com:587"
      username: "test.aureole@gmail.com"
      password: "${SMTP_PASSWORD}"
      from: "test.aureole@gmail.com"
      bcc: [ ]
      cc: [ ]
      templates:
        default_text: "lab/templates/default.txt"
        default_html: "lab/templates/default.html" # if extension is 'html' we send it as html